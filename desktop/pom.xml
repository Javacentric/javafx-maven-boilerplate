<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>boilerplate</groupId>
        <artifactId>parent</artifactId>
        <version>1.0.0</version>
    </parent>
    <artifactId>desktop</artifactId>

    <properties>
        <app.launcher>boilerplate.desktop.Launcher</app.launcher>
        <app.module>boilerplate.desktop</app.module>
        <!-- final artifact name -->
        <build.artifactName>${app.name}-${app.version}-${platform}-${os.arch}</build.artifactName>
        <!-- application dependencies that will be included as JAR files -->
        <build.dependenciesDir>${project.build.directory}${file.separator}dependencies</build.dependenciesDir>
        <!-- application dependencies that will be bundled into runtime image -->
        <build.platformModulesDir>${project.build.directory}${file.separator}platform-modules</build.platformModulesDir>
        <!-- jpackage generated application image root -->
        <build.package.appImageDir>${project.build.directory}${file.separator}app-image</build.package.appImageDir>
        <!-- AppDir spec compliant dir for creating AppImage -->
        <build.package.appDir>${project.build.directory}${file.separator}app-dir</build.package.appDir>
        <!-- jlink generated runtime image -->
        <build.package.runtimeImageDir>${project.build.directory}${file.separator}runtime-image</build.package.runtimeImageDir>
        <!-- contains package scripts after filtering and placeholder replacement -->
        <build.package.scriptsDir>${project.build.directory}${file.separator}package-scripts</build.package.scriptsDir>
        <!-- jpackage directory for temp artifacts -->
        <build.package.tempDir>${project.build.directory}${file.separator}package-temp</build.package.tempDir>
        <!-- final artifacts (zip, deb, rpm...) -->
        <build.releaseDir>${project.build.directory}${file.separator}release</build.releaseDir>
        <!-- windows specific properties -->
        <build.windows.uuid>00000000-0000-0000-0000-000000000001</build.windows.uuid>
        <build.windows.vendor>${project.organization.name}</build.windows.vendor>
    </properties>

    <dependencies>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>base</artifactId>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
        </dependency>
        <dependency>
            <groupId>org.kordamp.ikonli</groupId>
            <artifactId>ikonli-javafx</artifactId>
        </dependency>
        <dependency>
            <groupId>org.kordamp.ikonli</groupId>
            <artifactId>ikonli-materialdesign2-pack</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jetbrains</groupId>
            <artifactId>annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <!-- place all resources under module package prefix -->
            <resource>
                <directory>src/main/resources</directory>
                <targetPath>boilerplate/desktop</targetPath>
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <targetPath>boilerplate/desktop</targetPath>
                <filtering>true</filtering>
                <includes>
                    <include>application.properties</include>
                </includes>
            </resource>
            <!-- copy icons -->
            <resource>
                <directory>icons</directory>
                <targetPath>boilerplate/desktop/assets</targetPath>
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>icons</directory>
                <filtering>false</filtering>
                <targetPath>${project.build.directory}</targetPath>
            </resource>
            <!-- copy and filter build scripts -->
            <resource>
                <directory>src/package-scripts</directory>
                <filtering>true</filtering>
                <targetPath>${build.package.scriptsDir}</targetPath>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <configuration>
                    <!--
                        Gluon Maven plugin uses system (not project) JRE. Use system property
                        or env variable to set specific Java version to run the project.
                    -->
                    <executable>${java.home}/bin/java</executable>
                    <mainClass>${app.launcher}</mainClass>
                </configuration>
                <executions>
                    <execution>
                        <id>run</id>
                    </execution>
                    <!--
                        To launch application in debug mode:
                        - run "mvn javafx:run@debug" (exposes port for remote debugging)
                        - connect to the JVM via IDE remote debugging tool using exactly the same
                          agentlib option as below
                    -->
                    <execution>
                        <id>debug</id>
                        <configuration>
                            <options>
                                <option>-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:9090</option>
                            </options>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <!-- copy all dependencies that won't be included into runtime image -->
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${build.dependenciesDir}</outputDirectory>
                            <includeScope>runtime</includeScope>
                            <excludeGroupIds>org.openjfx</excludeGroupIds>
                        </configuration>
                    </execution>
                    <!-- copy platform dependencies that will be included into runtime image -->
                    <execution>
                        <id>copy-openjfx</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${build.platformModulesDir}</outputDirectory>
                            <includeGroupIds>org.openjfx</includeGroupIds>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <configuration>
                    <!-- skip installation to the local repository -->
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <!-- copy application JAR file to the dependencies -->
                <configuration>
                    <outputDirectory>${build.dependenciesDir}</outputDirectory>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.moditect</groupId>
                <artifactId>moditect-maven-plugin</artifactId>
                <!-- If your app depends on not modularized libraries
                     you have to inject module-info to them manually -->
                <executions>
                    <execution>
                        <id>add-module-info</id>
                        <phase>package</phase>
                        <goals>
                            <goal>add-module-info</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${build.dependenciesDir}</outputDirectory>
                            <overwriteExistingFiles>true</overwriteExistingFiles>
                            <modules>
                                <module>
                                    <artifact>
                                        <groupId>org.apache.commons</groupId>
                                        <artifactId>commons-lang3</artifactId>
                                    </artifact>
                                    <moduleInfo>
                                        <!-- use Automatic-Module-Name if supported and artifact ID otherwise -->
                                        <name>org.apache.commons.lang3</name>
                                        <!-- in simple cases exporting every package is enough -->
                                        <exports>*;</exports>
                                    </moduleInfo>
                                </module>
                            </modules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>io.github.wiverson</groupId>
                <artifactId>jtoolprovider-plugin</artifactId>
                <executions>
                    <!-- create custom JRE image -->
                    <execution>
                        <id>create-runtime-image</id>
                        <phase>package</phase>
                        <goals>
                            <goal>java-tool</goal>
                        </goals>
                        <configuration>
                            <toolName>jlink</toolName>
                            <!--
                                Minimal set of platform modules required to run the app.
                                If your packaged app doesn't start and also doesn't throw any error
                                this is probably because you haven't specified all required modules here.
                                - go to the ${build.package.appImageDir}
                                - run "./runtime/bin/java -p ./app/mods -m boilerplate.desktop/boilerplate.desktop.Launcher"
                                - check for errors and fix them
                            -->
                            <addModules>java.base,java.logging,jdk.localedata,java.desktop,javafx.controls</addModules>
                            <modulePath>${build.platformModulesDir}</modulePath>
                            <output>${build.package.runtimeImageDir}</output>
                            <args>
                                <!-- additional options to shrink resulting image even more -->
                                <arg>--compress=2</arg>
                                <arg>--include-locales=en</arg>
                                <arg>--no-header-files</arg>
                                <arg>--no-man-pages</arg>
                                <arg>--strip-debug</arg>
                                <arg>--verbose</arg>
                            </args>
                        </configuration>
                    </execution>
                    <!-- create application image (includes JRE plus application JARs and resources) -->
                    <execution>
                        <id>create-app-image</id>
                        <phase>package</phase>
                        <goals>
                            <goal>java-tool</goal>
                        </goals>
                        <configuration>
                            <toolName>jpackage</toolName>
                            <removeDirectories>${build.package.tempDir}</removeDirectories>
                            <args>
                                <arg>@${build.package.scriptsDir}${file.separator}args-base.txt</arg>
                                <arg>@${build.package.scriptsDir}${file.separator}args-app-image.txt</arg>
                            </args>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- compress app image and place result to the release dir -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <executions>
                    <execution>
                        <id>assembly</id>
                        <phase>install</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${build.releaseDir}</outputDirectory>
                            <finalName>${build.artifactName}</finalName>
                            <attach>false</attach>
                            <appendAssemblyId>false</appendAssemblyId>
                            <tarLongFileMode>posix</tarLongFileMode>
                            <descriptors>
                                <descriptor>src/assembly/archive.xml</descriptor>
                            </descriptors>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- move all generated artifacts to the release dir -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-artifacts</id>
                        <phase>install</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <move todir="${build.releaseDir}">
                                    <fileset dir="${project.build.directory}">
                                        <include name="*.deb"/>
                                        <include name="*.exe"/>
                                        <include name="*.msi"/>
                                        <include name="*.rpm"/>
                                    </fileset>
                                    <mapper type="regexp" from="^(.*)\.(deb|exe|msi|rpm)$" to="${build.artifactName}.\2"/>
                                </move>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <!--
            Add plugin config to build any OS-specific installers here.
            All build scripts use previously generated app-image.
        -->
        <profile>
            <id>linux-active</id>
            <activation>
                <os>
                    <family>unix</family>
                </os>
            </activation>
            <properties>
                <app.icon>${project.build.directory}/app-icon.png</app.icon>
                <app.build.compressionAlg>tar.gz</app.build.compressionAlg>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.github.wiverson</groupId>
                        <artifactId>jtoolprovider-plugin</artifactId>
                        <configuration>
                            <toolName>jpackage</toolName>
                            <removeDirectories>${build.package.tempDir}/</removeDirectories>
                        </configuration>
                        <executions>
                            <!-- prerequisites: 'rpm-build' installed -->
                            <execution>
                                <id>build-rpm</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>java-tool</goal>
                                </goals>
                                <configuration>
                                    <args>
                                        <arg>@${build.package.scriptsDir}/args-base.txt</arg>
                                        <arg>@${build.package.scriptsDir}/linux/args-rpm.txt</arg>
                                    </args>
                                </configuration>
                            </execution>
                            <!-- prerequisites: 'dpkg-dev' and 'fakeroot' installed -->
                            <execution>
                                <id>build-deb</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>java-tool</goal>
                                </goals>
                                <configuration>
                                    <args>
                                        <arg>@${build.package.scriptsDir}/args-base.txt</arg>
                                        <arg>@${build.package.scriptsDir}/linux/args-deb.txt</arg>
                                    </args>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <!-- prepare directory for the appimagetool
                                 https://docs.appimage.org/reference/appdir.html -->
                            <execution>
                                <id>prepare-app-dir</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <!--
                                             File permissions are not retained when files are copied; they end up with the default UMASK permissions instead.
                                             This is caused by the lack of any means to query or set file permissions in the current Java runtimes.
                                             If you need a permission-preserving copy function, use <exec executable="cp" ... > instead.
                                        -->
                                        <exec executable="cp">
                                            <arg line="-R ${build.package.appImageDir}/${app.name} ${build.package.appDir}"/>
                                        </exec>
                                        <copy file="${project.build.directory}/app-icon.png" tofile="${build.package.appDir}/${app.name}.png"/>
                                        <copy file="${build.package.scriptsDir}/linux/AppRun" tofile="${build.package.appDir}/AppRun"/>
                                        <copy file="${build.package.scriptsDir}/linux/App.desktop" tofile="${build.package.appDir}/${app.name}.desktop"/>
                                        <exec executable="chmod">
                                            <arg line="+x ${build.package.appDir}/AppRun"/>
                                        </exec>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>windows-active</id>
            <activation>
                <os>
                    <family>windows</family>
                </os>
            </activation>
            <properties>
                <app.icon>${project.build.directory}\app-icon.ico</app.icon>
                <app.build.compressionAlg>zip</app.build.compressionAlg>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.github.wiverson</groupId>
                        <artifactId>jtoolprovider-plugin</artifactId>
                        <configuration>
                            <toolName>jpackage</toolName>
                            <removeDirectories>${build.package.tempDir}/</removeDirectories>
                        </configuration>
                        <executions>
                            <!-- prerequisites: WiX toolset installed -->
                            <execution>
                                <id>build-exe</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>java-tool</goal>
                                </goals>
                                <configuration>
                                    <args>
                                        <arg>@${build.package.scriptsDir}\args-base.txt</arg>
                                        <arg>@${build.package.scriptsDir}\win\args-exe.txt</arg>
                                    </args>
                                </configuration>
                            </execution>
                            <!-- prerequisites: WiX toolset installed -->
                            <execution>
                                <id>build-msi</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>java-tool</goal>
                                </goals>
                                <configuration>
                                    <args>
                                        <arg>@${build.package.scriptsDir}\args-base.txt</arg>
                                        <arg>@${build.package.scriptsDir}\win\args-msi.txt</arg>
                                    </args>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>